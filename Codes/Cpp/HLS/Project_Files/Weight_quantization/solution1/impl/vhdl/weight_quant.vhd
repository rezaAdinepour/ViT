-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity weight_quant is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    input_0_ce1 : OUT STD_LOGIC;
    input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    input_1_ce1 : OUT STD_LOGIC;
    input_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    input_2_ce0 : OUT STD_LOGIC;
    input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    input_2_ce1 : OUT STD_LOGIC;
    input_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_0_ce1 : OUT STD_LOGIC;
    output_0_we1 : OUT STD_LOGIC;
    output_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_we0 : OUT STD_LOGIC;
    output_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_1_ce1 : OUT STD_LOGIC;
    output_1_we1 : OUT STD_LOGIC;
    output_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_2_ce0 : OUT STD_LOGIC;
    output_2_we0 : OUT STD_LOGIC;
    output_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_2_ce1 : OUT STD_LOGIC;
    output_2_we1 : OUT STD_LOGIC;
    output_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of weight_quant is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "weight_quant_weight_quant,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.297000,HLS_SYN_LAT=64,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4820,HLS_SYN_LUT=5019,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_41100000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001000100000000000000000000";
    constant ap_const_lv32_3727C5AC : STD_LOGIC_VECTOR (31 downto 0) := "00110111001001111100010110101100";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv64_3EE4F8B580000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111011100100111110001011010110000000000000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal grp_generic_round_float_s_fu_288_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_generic_round_float_s_fu_297_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_round_float_s_fu_306_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_round_float_s_fu_315_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_1441_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln313_fu_512_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_reg_1446 : STD_LOGIC_VECTOR (30 downto 0);
    signal data_1_reg_1451 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_1451_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln313_1_fu_516_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_1_reg_1456 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_1_reg_1456_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal data_2_reg_1461 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_reg_1461_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln313_2_fu_520_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_2_reg_1466 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_2_reg_1466_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_2_reg_1466_pp0_iter2_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_2_reg_1466_pp0_iter3_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal data_3_reg_1471 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_reg_1471_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln313_3_fu_524_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_3_reg_1476 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_3_reg_1476_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_3_reg_1476_pp0_iter2_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_3_reg_1476_pp0_iter3_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_3_reg_1476_pp0_iter4_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal data_4_reg_1481 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_reg_1481_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln313_4_fu_528_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_4_reg_1486 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_4_reg_1486_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_4_reg_1486_pp0_iter2_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_4_reg_1486_pp0_iter3_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_4_reg_1486_pp0_iter4_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_4_reg_1486_pp0_iter5_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_4_reg_1486_pp0_iter6_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal data_5_reg_1491 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_reg_1491_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln313_5_fu_532_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_5_reg_1496 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_5_reg_1496_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_5_reg_1496_pp0_iter2_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_5_reg_1496_pp0_iter3_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_5_reg_1496_pp0_iter4_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_5_reg_1496_pp0_iter5_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_5_reg_1496_pp0_iter6_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_5_reg_1496_pp0_iter7_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal bitcast_ln327_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_reg_1521_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln313_6_fu_548_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_6_reg_1526 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_6_reg_1526_pp0_iter2_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_6_reg_1526_pp0_iter3_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_6_reg_1526_pp0_iter4_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_6_reg_1526_pp0_iter5_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_6_reg_1526_pp0_iter6_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_6_reg_1526_pp0_iter7_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_6_reg_1526_pp0_iter8_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_6_reg_1526_pp0_iter9_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal data_7_reg_1531 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_reg_1531_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln313_7_fu_552_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_7_reg_1536 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_7_reg_1536_pp0_iter2_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_7_reg_1536_pp0_iter3_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_7_reg_1536_pp0_iter4_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_7_reg_1536_pp0_iter5_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_7_reg_1536_pp0_iter6_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_7_reg_1536_pp0_iter7_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_7_reg_1536_pp0_iter8_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_7_reg_1536_pp0_iter9_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_7_reg_1536_pp0_iter10_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_7_reg_1536_pp0_iter11_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal data_8_reg_1541 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_8_reg_1541_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln313_8_fu_556_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_8_reg_1546 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_8_reg_1546_pp0_iter2_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_8_reg_1546_pp0_iter3_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_8_reg_1546_pp0_iter4_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_8_reg_1546_pp0_iter5_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_8_reg_1546_pp0_iter6_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_8_reg_1546_pp0_iter7_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_8_reg_1546_pp0_iter8_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_8_reg_1546_pp0_iter9_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_8_reg_1546_pp0_iter10_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_8_reg_1546_pp0_iter11_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln313_8_reg_1546_pp0_iter12_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_1551 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln327_1_fu_567_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_reg_1561 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln327_2_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_reg_1571 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln327_3_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_reg_1581 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln327_4_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_4_reg_1591 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln327_5_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_5_reg_1601 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln327_6_fu_627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_6_reg_1611 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln327_7_fu_639_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_7_reg_1621 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_8_reg_1631 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_reg_1636 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_1_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_1_reg_1648 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_1653 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln13_fu_695_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln13_reg_1658 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_479_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_reg_1663 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal scale_reg_1668 : STD_LOGIC_VECTOR (31 downto 0);
    signal scale_reg_1668_pp0_iter27_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal scale_reg_1668_pp0_iter28_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_fu_702_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_1_fu_706_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_2_fu_710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_3_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_5_fu_722_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_6_fu_726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_7_fu_730_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_8_fu_734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_round_float_s_fu_324_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_8_reg_1727 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_1_fu_800_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_1_reg_1735 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_3_fu_870_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_3_reg_1740 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_5_fu_940_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_5_reg_1745 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_7_fu_1010_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_7_reg_1750 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_9_fu_1079_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_9_reg_1755 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_11_fu_1148_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_11_reg_1760 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_13_fu_1218_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_13_reg_1765 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_15_fu_1288_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_15_reg_1770 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_17_fu_1358_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal scaled_17_reg_1775 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_generic_round_float_s_fu_288_ap_start : STD_LOGIC;
    signal grp_generic_round_float_s_fu_288_ap_done : STD_LOGIC;
    signal grp_generic_round_float_s_fu_288_ap_idle : STD_LOGIC;
    signal grp_generic_round_float_s_fu_288_ap_ready : STD_LOGIC;
    signal grp_generic_round_float_s_fu_297_ap_start : STD_LOGIC;
    signal grp_generic_round_float_s_fu_297_ap_done : STD_LOGIC;
    signal grp_generic_round_float_s_fu_297_ap_idle : STD_LOGIC;
    signal grp_generic_round_float_s_fu_297_ap_ready : STD_LOGIC;
    signal grp_generic_round_float_s_fu_306_ap_start : STD_LOGIC;
    signal grp_generic_round_float_s_fu_306_ap_done : STD_LOGIC;
    signal grp_generic_round_float_s_fu_306_ap_idle : STD_LOGIC;
    signal grp_generic_round_float_s_fu_306_ap_ready : STD_LOGIC;
    signal grp_generic_round_float_s_fu_315_ap_start : STD_LOGIC;
    signal grp_generic_round_float_s_fu_315_ap_done : STD_LOGIC;
    signal grp_generic_round_float_s_fu_315_ap_idle : STD_LOGIC;
    signal grp_generic_round_float_s_fu_315_ap_ready : STD_LOGIC;
    signal grp_generic_round_float_s_fu_324_ap_start : STD_LOGIC;
    signal grp_generic_round_float_s_fu_324_ap_done : STD_LOGIC;
    signal grp_generic_round_float_s_fu_324_ap_idle : STD_LOGIC;
    signal grp_generic_round_float_s_fu_324_ap_ready : STD_LOGIC;
    signal grp_generic_round_float_s_fu_288_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_generic_round_float_s_fu_297_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_round_float_s_fu_306_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_round_float_s_fu_315_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_round_float_s_fu_324_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln23_1_fu_1371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln23_2_fu_1386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln23_3_fu_1376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln23_5_fu_1396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln23_6_fu_1381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln23_8_fu_1406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_342_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_354_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_359_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_364_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_369_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_374_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_379_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_384_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_388_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_396_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_406_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_419_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_455_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_536_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_fu_560_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_2_fu_572_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_3_fu_584_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_4_fu_596_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_5_fu_608_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_6_fu_620_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_7_fu_632_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_8_fu_644_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln23_9_fu_656_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_659_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_fu_669_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln23_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln22_fu_738_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_742_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_fu_752_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_1_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_9_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_1_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_fu_786_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln22_1_fu_808_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_812_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_1_fu_822_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_3_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_2_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_10_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_2_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_3_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_1_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_2_fu_856_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln22_2_fu_878_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_882_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_2_fu_892_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_5_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_4_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_11_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_4_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_5_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_2_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_4_fu_926_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln22_3_fu_948_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_952_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_3_fu_962_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_7_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_6_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_12_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_6_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_7_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_3_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_6_fu_996_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln22_4_fu_1018_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_1021_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_4_fu_1031_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_9_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_8_fu_1035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_13_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_8_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_9_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_4_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_8_fu_1065_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln22_5_fu_1086_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_1090_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_5_fu_1100_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_11_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_10_fu_1104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_14_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_10_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_11_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_5_fu_1142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_10_fu_1134_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln22_6_fu_1156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_1160_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_6_fu_1170_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_13_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_12_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_15_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_12_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_13_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_6_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_12_fu_1204_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln22_7_fu_1226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_1230_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_7_fu_1240_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_15_fu_1250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_14_fu_1244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_16_fu_1256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_14_fu_1262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_15_fu_1268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_7_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_14_fu_1274_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln22_8_fu_1296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_1300_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_8_fu_1310_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_17_fu_1320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_16_fu_1314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_17_fu_1326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_16_fu_1332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_17_fu_1338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_8_fu_1352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_16_fu_1344_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_406_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal grp_fu_413_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_419_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_425_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_431_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_437_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_443_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_449_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_455_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to31 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to32 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component weight_quant_generic_round_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component weight_quant_fadd_32ns_32ns_32_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component weight_quant_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component weight_quant_fdiv_32ns_32ns_32_7_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component weight_quant_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component weight_quant_fpext_32ns_64_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component weight_quant_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component weight_quant_ddiv_64ns_64ns_64_13_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_generic_round_float_s_fu_288 : component weight_quant_generic_round_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_round_float_s_fu_288_ap_start,
        ap_done => grp_generic_round_float_s_fu_288_ap_done,
        ap_idle => grp_generic_round_float_s_fu_288_ap_idle,
        ap_ready => grp_generic_round_float_s_fu_288_ap_ready,
        ap_ce => ap_const_logic_1,
        x => grp_fu_354_p2,
        ap_return => grp_generic_round_float_s_fu_288_ap_return);

    grp_generic_round_float_s_fu_297 : component weight_quant_generic_round_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_round_float_s_fu_297_ap_start,
        ap_done => grp_generic_round_float_s_fu_297_ap_done,
        ap_idle => grp_generic_round_float_s_fu_297_ap_idle,
        ap_ready => grp_generic_round_float_s_fu_297_ap_ready,
        ap_ce => ap_const_logic_1,
        x => grp_fu_359_p2,
        ap_return => grp_generic_round_float_s_fu_297_ap_return);

    grp_generic_round_float_s_fu_306 : component weight_quant_generic_round_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_round_float_s_fu_306_ap_start,
        ap_done => grp_generic_round_float_s_fu_306_ap_done,
        ap_idle => grp_generic_round_float_s_fu_306_ap_idle,
        ap_ready => grp_generic_round_float_s_fu_306_ap_ready,
        ap_ce => ap_const_logic_1,
        x => grp_fu_364_p2,
        ap_return => grp_generic_round_float_s_fu_306_ap_return);

    grp_generic_round_float_s_fu_315 : component weight_quant_generic_round_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_round_float_s_fu_315_ap_start,
        ap_done => grp_generic_round_float_s_fu_315_ap_done,
        ap_idle => grp_generic_round_float_s_fu_315_ap_idle,
        ap_ready => grp_generic_round_float_s_fu_315_ap_ready,
        ap_ce => ap_const_logic_1,
        x => grp_fu_369_p2,
        ap_return => grp_generic_round_float_s_fu_315_ap_return);

    grp_generic_round_float_s_fu_324 : component weight_quant_generic_round_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_round_float_s_fu_324_ap_start,
        ap_done => grp_generic_round_float_s_fu_324_ap_done,
        ap_idle => grp_generic_round_float_s_fu_324_ap_idle,
        ap_ready => grp_generic_round_float_s_fu_324_ap_ready,
        ap_ce => ap_const_logic_1,
        x => grp_fu_374_p2,
        ap_return => grp_generic_round_float_s_fu_324_ap_return);

    fadd_32ns_32ns_32_3_full_dsp_1_U4 : component weight_quant_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_333_p0,
        din1 => grp_fu_333_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_333_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U5 : component weight_quant_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_338_p0,
        din1 => grp_fu_338_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_338_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U6 : component weight_quant_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_342_p0,
        din1 => grp_fu_342_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_342_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U7 : component weight_quant_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_346_p0,
        din1 => grp_fu_346_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_346_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U8 : component weight_quant_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_7_reg_1621,
        din1 => grp_fu_350_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_350_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U9 : component weight_quant_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_354_p0,
        din1 => scale_reg_1668,
        ce => ap_const_logic_1,
        dout => grp_fu_354_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U10 : component weight_quant_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_359_p0,
        din1 => scale_reg_1668,
        ce => ap_const_logic_1,
        dout => grp_fu_359_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U11 : component weight_quant_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_364_p0,
        din1 => scale_reg_1668,
        ce => ap_const_logic_1,
        dout => grp_fu_364_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U12 : component weight_quant_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_369_p0,
        din1 => scale_reg_1668,
        ce => ap_const_logic_1,
        dout => grp_fu_369_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U13 : component weight_quant_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_374_p0,
        din1 => scale_reg_1668,
        ce => ap_const_logic_1,
        dout => grp_fu_374_p2);

    fdiv_32ns_32ns_32_7_no_dsp_1_U14 : component weight_quant_fdiv_32ns_32ns_32_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_379_p0,
        din1 => grp_fu_379_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_379_p2);

    fdiv_32ns_32ns_32_7_no_dsp_1_U15 : component weight_quant_fdiv_32ns_32ns_32_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_384_p0,
        din1 => scale_reg_1668_pp0_iter28_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_384_p2);

    fdiv_32ns_32ns_32_7_no_dsp_1_U16 : component weight_quant_fdiv_32ns_32ns_32_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_388_p0,
        din1 => scale_reg_1668_pp0_iter28_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_388_p2);

    fdiv_32ns_32ns_32_7_no_dsp_1_U17 : component weight_quant_fdiv_32ns_32ns_32_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_392_p0,
        din1 => scale_reg_1668_pp0_iter28_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_392_p2);

    fdiv_32ns_32ns_32_7_no_dsp_1_U18 : component weight_quant_fdiv_32ns_32ns_32_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_396_p0,
        din1 => scale_reg_1668_pp0_iter28_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_396_p2);

    fptrunc_64ns_32_2_no_dsp_1_U19 : component weight_quant_fptrunc_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => div_reg_1663,
        ce => ap_const_logic_1,
        dout => grp_fu_400_p1);

    fpext_32ns_64_1_no_dsp_1_U20 : component weight_quant_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mean_reg_1636,
        dout => tmp_9_fu_403_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U21 : component weight_quant_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_406_p0,
        din1 => grp_fu_406_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_406_opcode,
        dout => grp_fu_406_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U22 : component weight_quant_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_generic_round_float_s_fu_288_ap_return,
        din1 => grp_fu_413_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_413_opcode,
        dout => grp_fu_413_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U23 : component weight_quant_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_419_p0,
        din1 => grp_fu_419_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_419_opcode,
        dout => grp_fu_419_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U24 : component weight_quant_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_generic_round_float_s_fu_297_ap_return,
        din1 => grp_fu_425_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_425_opcode,
        dout => grp_fu_425_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U25 : component weight_quant_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_431_p0,
        din1 => grp_fu_431_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_431_opcode,
        dout => grp_fu_431_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U26 : component weight_quant_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_generic_round_float_s_fu_306_ap_return,
        din1 => grp_fu_437_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_437_opcode,
        dout => grp_fu_437_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U27 : component weight_quant_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_443_p0,
        din1 => grp_fu_443_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_443_opcode,
        dout => grp_fu_443_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U28 : component weight_quant_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_generic_round_float_s_fu_315_ap_return,
        din1 => grp_fu_449_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_449_opcode,
        dout => grp_fu_449_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U29 : component weight_quant_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_455_p0,
        din1 => grp_fu_455_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_455_opcode,
        dout => grp_fu_455_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U30 : component weight_quant_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_generic_round_float_s_fu_324_ap_return,
        din1 => ap_const_lv32_BF800000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_461_p2);

    ddiv_64ns_64ns_64_13_no_dsp_1_U31 : component weight_quant_ddiv_64ns_64ns_64_13_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => select_ln13_reg_1658,
        ce => ap_const_logic_1,
        dout => grp_fu_479_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_round_float_s_fu_288_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_round_float_s_fu_288_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)))) then 
                    grp_generic_round_float_s_fu_288_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_round_float_s_fu_288_ap_ready = ap_const_logic_1)) then 
                    grp_generic_round_float_s_fu_288_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_round_float_s_fu_297_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_round_float_s_fu_297_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)))) then 
                    grp_generic_round_float_s_fu_297_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_round_float_s_fu_297_ap_ready = ap_const_logic_1)) then 
                    grp_generic_round_float_s_fu_297_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_round_float_s_fu_306_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_round_float_s_fu_306_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)))) then 
                    grp_generic_round_float_s_fu_306_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_round_float_s_fu_306_ap_ready = ap_const_logic_1)) then 
                    grp_generic_round_float_s_fu_306_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_round_float_s_fu_315_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_round_float_s_fu_315_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)))) then 
                    grp_generic_round_float_s_fu_315_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_round_float_s_fu_315_ap_ready = ap_const_logic_1)) then 
                    grp_generic_round_float_s_fu_315_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_round_float_s_fu_324_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_round_float_s_fu_324_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                    grp_generic_round_float_s_fu_324_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_round_float_s_fu_324_ap_ready = ap_const_logic_1)) then 
                    grp_generic_round_float_s_fu_324_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                data_1_reg_1451 <= input_1_q1;
                data_2_reg_1461 <= input_2_q1;
                data_3_reg_1471 <= input_0_q0;
                data_4_reg_1481 <= input_1_q0;
                data_5_reg_1491 <= input_2_q0;
                data_reg_1441 <= input_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                data_1_reg_1451_pp0_iter10_reg <= data_1_reg_1451_pp0_iter9_reg;
                data_1_reg_1451_pp0_iter11_reg <= data_1_reg_1451_pp0_iter10_reg;
                data_1_reg_1451_pp0_iter12_reg <= data_1_reg_1451_pp0_iter11_reg;
                data_1_reg_1451_pp0_iter13_reg <= data_1_reg_1451_pp0_iter12_reg;
                data_1_reg_1451_pp0_iter14_reg <= data_1_reg_1451_pp0_iter13_reg;
                data_1_reg_1451_pp0_iter15_reg <= data_1_reg_1451_pp0_iter14_reg;
                data_1_reg_1451_pp0_iter16_reg <= data_1_reg_1451_pp0_iter15_reg;
                data_1_reg_1451_pp0_iter17_reg <= data_1_reg_1451_pp0_iter16_reg;
                data_1_reg_1451_pp0_iter18_reg <= data_1_reg_1451_pp0_iter17_reg;
                data_1_reg_1451_pp0_iter19_reg <= data_1_reg_1451_pp0_iter18_reg;
                data_1_reg_1451_pp0_iter1_reg <= data_1_reg_1451;
                data_1_reg_1451_pp0_iter20_reg <= data_1_reg_1451_pp0_iter19_reg;
                data_1_reg_1451_pp0_iter21_reg <= data_1_reg_1451_pp0_iter20_reg;
                data_1_reg_1451_pp0_iter22_reg <= data_1_reg_1451_pp0_iter21_reg;
                data_1_reg_1451_pp0_iter23_reg <= data_1_reg_1451_pp0_iter22_reg;
                data_1_reg_1451_pp0_iter24_reg <= data_1_reg_1451_pp0_iter23_reg;
                data_1_reg_1451_pp0_iter25_reg <= data_1_reg_1451_pp0_iter24_reg;
                data_1_reg_1451_pp0_iter2_reg <= data_1_reg_1451_pp0_iter1_reg;
                data_1_reg_1451_pp0_iter3_reg <= data_1_reg_1451_pp0_iter2_reg;
                data_1_reg_1451_pp0_iter4_reg <= data_1_reg_1451_pp0_iter3_reg;
                data_1_reg_1451_pp0_iter5_reg <= data_1_reg_1451_pp0_iter4_reg;
                data_1_reg_1451_pp0_iter6_reg <= data_1_reg_1451_pp0_iter5_reg;
                data_1_reg_1451_pp0_iter7_reg <= data_1_reg_1451_pp0_iter6_reg;
                data_1_reg_1451_pp0_iter8_reg <= data_1_reg_1451_pp0_iter7_reg;
                data_1_reg_1451_pp0_iter9_reg <= data_1_reg_1451_pp0_iter8_reg;
                data_2_reg_1461_pp0_iter10_reg <= data_2_reg_1461_pp0_iter9_reg;
                data_2_reg_1461_pp0_iter11_reg <= data_2_reg_1461_pp0_iter10_reg;
                data_2_reg_1461_pp0_iter12_reg <= data_2_reg_1461_pp0_iter11_reg;
                data_2_reg_1461_pp0_iter13_reg <= data_2_reg_1461_pp0_iter12_reg;
                data_2_reg_1461_pp0_iter14_reg <= data_2_reg_1461_pp0_iter13_reg;
                data_2_reg_1461_pp0_iter15_reg <= data_2_reg_1461_pp0_iter14_reg;
                data_2_reg_1461_pp0_iter16_reg <= data_2_reg_1461_pp0_iter15_reg;
                data_2_reg_1461_pp0_iter17_reg <= data_2_reg_1461_pp0_iter16_reg;
                data_2_reg_1461_pp0_iter18_reg <= data_2_reg_1461_pp0_iter17_reg;
                data_2_reg_1461_pp0_iter19_reg <= data_2_reg_1461_pp0_iter18_reg;
                data_2_reg_1461_pp0_iter1_reg <= data_2_reg_1461;
                data_2_reg_1461_pp0_iter20_reg <= data_2_reg_1461_pp0_iter19_reg;
                data_2_reg_1461_pp0_iter21_reg <= data_2_reg_1461_pp0_iter20_reg;
                data_2_reg_1461_pp0_iter22_reg <= data_2_reg_1461_pp0_iter21_reg;
                data_2_reg_1461_pp0_iter23_reg <= data_2_reg_1461_pp0_iter22_reg;
                data_2_reg_1461_pp0_iter24_reg <= data_2_reg_1461_pp0_iter23_reg;
                data_2_reg_1461_pp0_iter25_reg <= data_2_reg_1461_pp0_iter24_reg;
                data_2_reg_1461_pp0_iter2_reg <= data_2_reg_1461_pp0_iter1_reg;
                data_2_reg_1461_pp0_iter3_reg <= data_2_reg_1461_pp0_iter2_reg;
                data_2_reg_1461_pp0_iter4_reg <= data_2_reg_1461_pp0_iter3_reg;
                data_2_reg_1461_pp0_iter5_reg <= data_2_reg_1461_pp0_iter4_reg;
                data_2_reg_1461_pp0_iter6_reg <= data_2_reg_1461_pp0_iter5_reg;
                data_2_reg_1461_pp0_iter7_reg <= data_2_reg_1461_pp0_iter6_reg;
                data_2_reg_1461_pp0_iter8_reg <= data_2_reg_1461_pp0_iter7_reg;
                data_2_reg_1461_pp0_iter9_reg <= data_2_reg_1461_pp0_iter8_reg;
                data_3_reg_1471_pp0_iter10_reg <= data_3_reg_1471_pp0_iter9_reg;
                data_3_reg_1471_pp0_iter11_reg <= data_3_reg_1471_pp0_iter10_reg;
                data_3_reg_1471_pp0_iter12_reg <= data_3_reg_1471_pp0_iter11_reg;
                data_3_reg_1471_pp0_iter13_reg <= data_3_reg_1471_pp0_iter12_reg;
                data_3_reg_1471_pp0_iter14_reg <= data_3_reg_1471_pp0_iter13_reg;
                data_3_reg_1471_pp0_iter15_reg <= data_3_reg_1471_pp0_iter14_reg;
                data_3_reg_1471_pp0_iter16_reg <= data_3_reg_1471_pp0_iter15_reg;
                data_3_reg_1471_pp0_iter17_reg <= data_3_reg_1471_pp0_iter16_reg;
                data_3_reg_1471_pp0_iter18_reg <= data_3_reg_1471_pp0_iter17_reg;
                data_3_reg_1471_pp0_iter19_reg <= data_3_reg_1471_pp0_iter18_reg;
                data_3_reg_1471_pp0_iter1_reg <= data_3_reg_1471;
                data_3_reg_1471_pp0_iter20_reg <= data_3_reg_1471_pp0_iter19_reg;
                data_3_reg_1471_pp0_iter21_reg <= data_3_reg_1471_pp0_iter20_reg;
                data_3_reg_1471_pp0_iter22_reg <= data_3_reg_1471_pp0_iter21_reg;
                data_3_reg_1471_pp0_iter23_reg <= data_3_reg_1471_pp0_iter22_reg;
                data_3_reg_1471_pp0_iter24_reg <= data_3_reg_1471_pp0_iter23_reg;
                data_3_reg_1471_pp0_iter25_reg <= data_3_reg_1471_pp0_iter24_reg;
                data_3_reg_1471_pp0_iter2_reg <= data_3_reg_1471_pp0_iter1_reg;
                data_3_reg_1471_pp0_iter3_reg <= data_3_reg_1471_pp0_iter2_reg;
                data_3_reg_1471_pp0_iter4_reg <= data_3_reg_1471_pp0_iter3_reg;
                data_3_reg_1471_pp0_iter5_reg <= data_3_reg_1471_pp0_iter4_reg;
                data_3_reg_1471_pp0_iter6_reg <= data_3_reg_1471_pp0_iter5_reg;
                data_3_reg_1471_pp0_iter7_reg <= data_3_reg_1471_pp0_iter6_reg;
                data_3_reg_1471_pp0_iter8_reg <= data_3_reg_1471_pp0_iter7_reg;
                data_3_reg_1471_pp0_iter9_reg <= data_3_reg_1471_pp0_iter8_reg;
                data_4_reg_1481_pp0_iter10_reg <= data_4_reg_1481_pp0_iter9_reg;
                data_4_reg_1481_pp0_iter11_reg <= data_4_reg_1481_pp0_iter10_reg;
                data_4_reg_1481_pp0_iter12_reg <= data_4_reg_1481_pp0_iter11_reg;
                data_4_reg_1481_pp0_iter13_reg <= data_4_reg_1481_pp0_iter12_reg;
                data_4_reg_1481_pp0_iter14_reg <= data_4_reg_1481_pp0_iter13_reg;
                data_4_reg_1481_pp0_iter15_reg <= data_4_reg_1481_pp0_iter14_reg;
                data_4_reg_1481_pp0_iter16_reg <= data_4_reg_1481_pp0_iter15_reg;
                data_4_reg_1481_pp0_iter17_reg <= data_4_reg_1481_pp0_iter16_reg;
                data_4_reg_1481_pp0_iter18_reg <= data_4_reg_1481_pp0_iter17_reg;
                data_4_reg_1481_pp0_iter19_reg <= data_4_reg_1481_pp0_iter18_reg;
                data_4_reg_1481_pp0_iter1_reg <= data_4_reg_1481;
                data_4_reg_1481_pp0_iter20_reg <= data_4_reg_1481_pp0_iter19_reg;
                data_4_reg_1481_pp0_iter21_reg <= data_4_reg_1481_pp0_iter20_reg;
                data_4_reg_1481_pp0_iter22_reg <= data_4_reg_1481_pp0_iter21_reg;
                data_4_reg_1481_pp0_iter23_reg <= data_4_reg_1481_pp0_iter22_reg;
                data_4_reg_1481_pp0_iter24_reg <= data_4_reg_1481_pp0_iter23_reg;
                data_4_reg_1481_pp0_iter25_reg <= data_4_reg_1481_pp0_iter24_reg;
                data_4_reg_1481_pp0_iter2_reg <= data_4_reg_1481_pp0_iter1_reg;
                data_4_reg_1481_pp0_iter3_reg <= data_4_reg_1481_pp0_iter2_reg;
                data_4_reg_1481_pp0_iter4_reg <= data_4_reg_1481_pp0_iter3_reg;
                data_4_reg_1481_pp0_iter5_reg <= data_4_reg_1481_pp0_iter4_reg;
                data_4_reg_1481_pp0_iter6_reg <= data_4_reg_1481_pp0_iter5_reg;
                data_4_reg_1481_pp0_iter7_reg <= data_4_reg_1481_pp0_iter6_reg;
                data_4_reg_1481_pp0_iter8_reg <= data_4_reg_1481_pp0_iter7_reg;
                data_4_reg_1481_pp0_iter9_reg <= data_4_reg_1481_pp0_iter8_reg;
                data_5_reg_1491_pp0_iter10_reg <= data_5_reg_1491_pp0_iter9_reg;
                data_5_reg_1491_pp0_iter11_reg <= data_5_reg_1491_pp0_iter10_reg;
                data_5_reg_1491_pp0_iter12_reg <= data_5_reg_1491_pp0_iter11_reg;
                data_5_reg_1491_pp0_iter13_reg <= data_5_reg_1491_pp0_iter12_reg;
                data_5_reg_1491_pp0_iter14_reg <= data_5_reg_1491_pp0_iter13_reg;
                data_5_reg_1491_pp0_iter15_reg <= data_5_reg_1491_pp0_iter14_reg;
                data_5_reg_1491_pp0_iter16_reg <= data_5_reg_1491_pp0_iter15_reg;
                data_5_reg_1491_pp0_iter17_reg <= data_5_reg_1491_pp0_iter16_reg;
                data_5_reg_1491_pp0_iter18_reg <= data_5_reg_1491_pp0_iter17_reg;
                data_5_reg_1491_pp0_iter19_reg <= data_5_reg_1491_pp0_iter18_reg;
                data_5_reg_1491_pp0_iter1_reg <= data_5_reg_1491;
                data_5_reg_1491_pp0_iter20_reg <= data_5_reg_1491_pp0_iter19_reg;
                data_5_reg_1491_pp0_iter21_reg <= data_5_reg_1491_pp0_iter20_reg;
                data_5_reg_1491_pp0_iter22_reg <= data_5_reg_1491_pp0_iter21_reg;
                data_5_reg_1491_pp0_iter23_reg <= data_5_reg_1491_pp0_iter22_reg;
                data_5_reg_1491_pp0_iter24_reg <= data_5_reg_1491_pp0_iter23_reg;
                data_5_reg_1491_pp0_iter25_reg <= data_5_reg_1491_pp0_iter24_reg;
                data_5_reg_1491_pp0_iter26_reg <= data_5_reg_1491_pp0_iter25_reg;
                data_5_reg_1491_pp0_iter2_reg <= data_5_reg_1491_pp0_iter1_reg;
                data_5_reg_1491_pp0_iter3_reg <= data_5_reg_1491_pp0_iter2_reg;
                data_5_reg_1491_pp0_iter4_reg <= data_5_reg_1491_pp0_iter3_reg;
                data_5_reg_1491_pp0_iter5_reg <= data_5_reg_1491_pp0_iter4_reg;
                data_5_reg_1491_pp0_iter6_reg <= data_5_reg_1491_pp0_iter5_reg;
                data_5_reg_1491_pp0_iter7_reg <= data_5_reg_1491_pp0_iter6_reg;
                data_5_reg_1491_pp0_iter8_reg <= data_5_reg_1491_pp0_iter7_reg;
                data_5_reg_1491_pp0_iter9_reg <= data_5_reg_1491_pp0_iter8_reg;
                data_reg_1441_pp0_iter10_reg <= data_reg_1441_pp0_iter9_reg;
                data_reg_1441_pp0_iter11_reg <= data_reg_1441_pp0_iter10_reg;
                data_reg_1441_pp0_iter12_reg <= data_reg_1441_pp0_iter11_reg;
                data_reg_1441_pp0_iter13_reg <= data_reg_1441_pp0_iter12_reg;
                data_reg_1441_pp0_iter14_reg <= data_reg_1441_pp0_iter13_reg;
                data_reg_1441_pp0_iter15_reg <= data_reg_1441_pp0_iter14_reg;
                data_reg_1441_pp0_iter16_reg <= data_reg_1441_pp0_iter15_reg;
                data_reg_1441_pp0_iter17_reg <= data_reg_1441_pp0_iter16_reg;
                data_reg_1441_pp0_iter18_reg <= data_reg_1441_pp0_iter17_reg;
                data_reg_1441_pp0_iter19_reg <= data_reg_1441_pp0_iter18_reg;
                data_reg_1441_pp0_iter1_reg <= data_reg_1441;
                data_reg_1441_pp0_iter20_reg <= data_reg_1441_pp0_iter19_reg;
                data_reg_1441_pp0_iter21_reg <= data_reg_1441_pp0_iter20_reg;
                data_reg_1441_pp0_iter22_reg <= data_reg_1441_pp0_iter21_reg;
                data_reg_1441_pp0_iter23_reg <= data_reg_1441_pp0_iter22_reg;
                data_reg_1441_pp0_iter24_reg <= data_reg_1441_pp0_iter23_reg;
                data_reg_1441_pp0_iter25_reg <= data_reg_1441_pp0_iter24_reg;
                data_reg_1441_pp0_iter2_reg <= data_reg_1441_pp0_iter1_reg;
                data_reg_1441_pp0_iter3_reg <= data_reg_1441_pp0_iter2_reg;
                data_reg_1441_pp0_iter4_reg <= data_reg_1441_pp0_iter3_reg;
                data_reg_1441_pp0_iter5_reg <= data_reg_1441_pp0_iter4_reg;
                data_reg_1441_pp0_iter6_reg <= data_reg_1441_pp0_iter5_reg;
                data_reg_1441_pp0_iter7_reg <= data_reg_1441_pp0_iter6_reg;
                data_reg_1441_pp0_iter8_reg <= data_reg_1441_pp0_iter7_reg;
                data_reg_1441_pp0_iter9_reg <= data_reg_1441_pp0_iter8_reg;
                scaled_11_reg_1760 <= scaled_11_fu_1148_p3;
                scaled_13_reg_1765 <= scaled_13_fu_1218_p3;
                scaled_15_reg_1770 <= scaled_15_fu_1288_p3;
                scaled_17_reg_1775 <= scaled_17_fu_1358_p3;
                scaled_8_reg_1727 <= grp_generic_round_float_s_fu_324_ap_return;
                select_ln13_reg_1658 <= select_ln13_fu_695_p3;
                trunc_ln313_1_reg_1456 <= trunc_ln313_1_fu_516_p1;
                trunc_ln313_1_reg_1456_pp0_iter1_reg <= trunc_ln313_1_reg_1456;
                trunc_ln313_2_reg_1466 <= trunc_ln313_2_fu_520_p1;
                trunc_ln313_2_reg_1466_pp0_iter1_reg <= trunc_ln313_2_reg_1466;
                trunc_ln313_2_reg_1466_pp0_iter2_reg <= trunc_ln313_2_reg_1466_pp0_iter1_reg;
                trunc_ln313_2_reg_1466_pp0_iter3_reg <= trunc_ln313_2_reg_1466_pp0_iter2_reg;
                trunc_ln313_3_reg_1476 <= trunc_ln313_3_fu_524_p1;
                trunc_ln313_3_reg_1476_pp0_iter1_reg <= trunc_ln313_3_reg_1476;
                trunc_ln313_3_reg_1476_pp0_iter2_reg <= trunc_ln313_3_reg_1476_pp0_iter1_reg;
                trunc_ln313_3_reg_1476_pp0_iter3_reg <= trunc_ln313_3_reg_1476_pp0_iter2_reg;
                trunc_ln313_3_reg_1476_pp0_iter4_reg <= trunc_ln313_3_reg_1476_pp0_iter3_reg;
                trunc_ln313_4_reg_1486 <= trunc_ln313_4_fu_528_p1;
                trunc_ln313_4_reg_1486_pp0_iter1_reg <= trunc_ln313_4_reg_1486;
                trunc_ln313_4_reg_1486_pp0_iter2_reg <= trunc_ln313_4_reg_1486_pp0_iter1_reg;
                trunc_ln313_4_reg_1486_pp0_iter3_reg <= trunc_ln313_4_reg_1486_pp0_iter2_reg;
                trunc_ln313_4_reg_1486_pp0_iter4_reg <= trunc_ln313_4_reg_1486_pp0_iter3_reg;
                trunc_ln313_4_reg_1486_pp0_iter5_reg <= trunc_ln313_4_reg_1486_pp0_iter4_reg;
                trunc_ln313_4_reg_1486_pp0_iter6_reg <= trunc_ln313_4_reg_1486_pp0_iter5_reg;
                trunc_ln313_5_reg_1496 <= trunc_ln313_5_fu_532_p1;
                trunc_ln313_5_reg_1496_pp0_iter1_reg <= trunc_ln313_5_reg_1496;
                trunc_ln313_5_reg_1496_pp0_iter2_reg <= trunc_ln313_5_reg_1496_pp0_iter1_reg;
                trunc_ln313_5_reg_1496_pp0_iter3_reg <= trunc_ln313_5_reg_1496_pp0_iter2_reg;
                trunc_ln313_5_reg_1496_pp0_iter4_reg <= trunc_ln313_5_reg_1496_pp0_iter3_reg;
                trunc_ln313_5_reg_1496_pp0_iter5_reg <= trunc_ln313_5_reg_1496_pp0_iter4_reg;
                trunc_ln313_5_reg_1496_pp0_iter6_reg <= trunc_ln313_5_reg_1496_pp0_iter5_reg;
                trunc_ln313_5_reg_1496_pp0_iter7_reg <= trunc_ln313_5_reg_1496_pp0_iter6_reg;
                trunc_ln313_reg_1446 <= trunc_ln313_fu_512_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_6_reg_1521 <= input_0_q0;
                data_7_reg_1531 <= input_1_q0;
                data_8_reg_1541 <= input_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_6_reg_1521_pp0_iter10_reg <= data_6_reg_1521_pp0_iter9_reg;
                data_6_reg_1521_pp0_iter11_reg <= data_6_reg_1521_pp0_iter10_reg;
                data_6_reg_1521_pp0_iter12_reg <= data_6_reg_1521_pp0_iter11_reg;
                data_6_reg_1521_pp0_iter13_reg <= data_6_reg_1521_pp0_iter12_reg;
                data_6_reg_1521_pp0_iter14_reg <= data_6_reg_1521_pp0_iter13_reg;
                data_6_reg_1521_pp0_iter15_reg <= data_6_reg_1521_pp0_iter14_reg;
                data_6_reg_1521_pp0_iter16_reg <= data_6_reg_1521_pp0_iter15_reg;
                data_6_reg_1521_pp0_iter17_reg <= data_6_reg_1521_pp0_iter16_reg;
                data_6_reg_1521_pp0_iter18_reg <= data_6_reg_1521_pp0_iter17_reg;
                data_6_reg_1521_pp0_iter19_reg <= data_6_reg_1521_pp0_iter18_reg;
                data_6_reg_1521_pp0_iter20_reg <= data_6_reg_1521_pp0_iter19_reg;
                data_6_reg_1521_pp0_iter21_reg <= data_6_reg_1521_pp0_iter20_reg;
                data_6_reg_1521_pp0_iter22_reg <= data_6_reg_1521_pp0_iter21_reg;
                data_6_reg_1521_pp0_iter23_reg <= data_6_reg_1521_pp0_iter22_reg;
                data_6_reg_1521_pp0_iter24_reg <= data_6_reg_1521_pp0_iter23_reg;
                data_6_reg_1521_pp0_iter25_reg <= data_6_reg_1521_pp0_iter24_reg;
                data_6_reg_1521_pp0_iter26_reg <= data_6_reg_1521_pp0_iter25_reg;
                data_6_reg_1521_pp0_iter2_reg <= data_6_reg_1521;
                data_6_reg_1521_pp0_iter3_reg <= data_6_reg_1521_pp0_iter2_reg;
                data_6_reg_1521_pp0_iter4_reg <= data_6_reg_1521_pp0_iter3_reg;
                data_6_reg_1521_pp0_iter5_reg <= data_6_reg_1521_pp0_iter4_reg;
                data_6_reg_1521_pp0_iter6_reg <= data_6_reg_1521_pp0_iter5_reg;
                data_6_reg_1521_pp0_iter7_reg <= data_6_reg_1521_pp0_iter6_reg;
                data_6_reg_1521_pp0_iter8_reg <= data_6_reg_1521_pp0_iter7_reg;
                data_6_reg_1521_pp0_iter9_reg <= data_6_reg_1521_pp0_iter8_reg;
                data_7_reg_1531_pp0_iter10_reg <= data_7_reg_1531_pp0_iter9_reg;
                data_7_reg_1531_pp0_iter11_reg <= data_7_reg_1531_pp0_iter10_reg;
                data_7_reg_1531_pp0_iter12_reg <= data_7_reg_1531_pp0_iter11_reg;
                data_7_reg_1531_pp0_iter13_reg <= data_7_reg_1531_pp0_iter12_reg;
                data_7_reg_1531_pp0_iter14_reg <= data_7_reg_1531_pp0_iter13_reg;
                data_7_reg_1531_pp0_iter15_reg <= data_7_reg_1531_pp0_iter14_reg;
                data_7_reg_1531_pp0_iter16_reg <= data_7_reg_1531_pp0_iter15_reg;
                data_7_reg_1531_pp0_iter17_reg <= data_7_reg_1531_pp0_iter16_reg;
                data_7_reg_1531_pp0_iter18_reg <= data_7_reg_1531_pp0_iter17_reg;
                data_7_reg_1531_pp0_iter19_reg <= data_7_reg_1531_pp0_iter18_reg;
                data_7_reg_1531_pp0_iter20_reg <= data_7_reg_1531_pp0_iter19_reg;
                data_7_reg_1531_pp0_iter21_reg <= data_7_reg_1531_pp0_iter20_reg;
                data_7_reg_1531_pp0_iter22_reg <= data_7_reg_1531_pp0_iter21_reg;
                data_7_reg_1531_pp0_iter23_reg <= data_7_reg_1531_pp0_iter22_reg;
                data_7_reg_1531_pp0_iter24_reg <= data_7_reg_1531_pp0_iter23_reg;
                data_7_reg_1531_pp0_iter25_reg <= data_7_reg_1531_pp0_iter24_reg;
                data_7_reg_1531_pp0_iter26_reg <= data_7_reg_1531_pp0_iter25_reg;
                data_7_reg_1531_pp0_iter2_reg <= data_7_reg_1531;
                data_7_reg_1531_pp0_iter3_reg <= data_7_reg_1531_pp0_iter2_reg;
                data_7_reg_1531_pp0_iter4_reg <= data_7_reg_1531_pp0_iter3_reg;
                data_7_reg_1531_pp0_iter5_reg <= data_7_reg_1531_pp0_iter4_reg;
                data_7_reg_1531_pp0_iter6_reg <= data_7_reg_1531_pp0_iter5_reg;
                data_7_reg_1531_pp0_iter7_reg <= data_7_reg_1531_pp0_iter6_reg;
                data_7_reg_1531_pp0_iter8_reg <= data_7_reg_1531_pp0_iter7_reg;
                data_7_reg_1531_pp0_iter9_reg <= data_7_reg_1531_pp0_iter8_reg;
                data_8_reg_1541_pp0_iter10_reg <= data_8_reg_1541_pp0_iter9_reg;
                data_8_reg_1541_pp0_iter11_reg <= data_8_reg_1541_pp0_iter10_reg;
                data_8_reg_1541_pp0_iter12_reg <= data_8_reg_1541_pp0_iter11_reg;
                data_8_reg_1541_pp0_iter13_reg <= data_8_reg_1541_pp0_iter12_reg;
                data_8_reg_1541_pp0_iter14_reg <= data_8_reg_1541_pp0_iter13_reg;
                data_8_reg_1541_pp0_iter15_reg <= data_8_reg_1541_pp0_iter14_reg;
                data_8_reg_1541_pp0_iter16_reg <= data_8_reg_1541_pp0_iter15_reg;
                data_8_reg_1541_pp0_iter17_reg <= data_8_reg_1541_pp0_iter16_reg;
                data_8_reg_1541_pp0_iter18_reg <= data_8_reg_1541_pp0_iter17_reg;
                data_8_reg_1541_pp0_iter19_reg <= data_8_reg_1541_pp0_iter18_reg;
                data_8_reg_1541_pp0_iter20_reg <= data_8_reg_1541_pp0_iter19_reg;
                data_8_reg_1541_pp0_iter21_reg <= data_8_reg_1541_pp0_iter20_reg;
                data_8_reg_1541_pp0_iter22_reg <= data_8_reg_1541_pp0_iter21_reg;
                data_8_reg_1541_pp0_iter23_reg <= data_8_reg_1541_pp0_iter22_reg;
                data_8_reg_1541_pp0_iter24_reg <= data_8_reg_1541_pp0_iter23_reg;
                data_8_reg_1541_pp0_iter25_reg <= data_8_reg_1541_pp0_iter24_reg;
                data_8_reg_1541_pp0_iter26_reg <= data_8_reg_1541_pp0_iter25_reg;
                data_8_reg_1541_pp0_iter2_reg <= data_8_reg_1541;
                data_8_reg_1541_pp0_iter3_reg <= data_8_reg_1541_pp0_iter2_reg;
                data_8_reg_1541_pp0_iter4_reg <= data_8_reg_1541_pp0_iter3_reg;
                data_8_reg_1541_pp0_iter5_reg <= data_8_reg_1541_pp0_iter4_reg;
                data_8_reg_1541_pp0_iter6_reg <= data_8_reg_1541_pp0_iter5_reg;
                data_8_reg_1541_pp0_iter7_reg <= data_8_reg_1541_pp0_iter6_reg;
                data_8_reg_1541_pp0_iter8_reg <= data_8_reg_1541_pp0_iter7_reg;
                data_8_reg_1541_pp0_iter9_reg <= data_8_reg_1541_pp0_iter8_reg;
                div_reg_1663 <= grp_fu_479_p2;
                icmp_ln23_1_reg_1648 <= icmp_ln23_1_fu_679_p2;
                icmp_ln23_reg_1643 <= icmp_ln23_fu_673_p2;
                scale_reg_1668 <= grp_fu_400_p1;
                scale_reg_1668_pp0_iter27_reg <= scale_reg_1668;
                scale_reg_1668_pp0_iter28_reg <= scale_reg_1668_pp0_iter27_reg;
                scaled_1_reg_1735 <= scaled_1_fu_800_p3;
                scaled_3_reg_1740 <= scaled_3_fu_870_p3;
                scaled_5_reg_1745 <= scaled_5_fu_940_p3;
                scaled_7_reg_1750 <= scaled_7_fu_1010_p3;
                scaled_9_reg_1755 <= scaled_9_fu_1079_p3;
                sum_8_reg_1631 <= grp_fu_350_p2;
                tmp_9_reg_1653 <= tmp_9_fu_403_p1;
                trunc_ln313_6_reg_1526 <= trunc_ln313_6_fu_548_p1;
                trunc_ln313_6_reg_1526_pp0_iter2_reg <= trunc_ln313_6_reg_1526;
                trunc_ln313_6_reg_1526_pp0_iter3_reg <= trunc_ln313_6_reg_1526_pp0_iter2_reg;
                trunc_ln313_6_reg_1526_pp0_iter4_reg <= trunc_ln313_6_reg_1526_pp0_iter3_reg;
                trunc_ln313_6_reg_1526_pp0_iter5_reg <= trunc_ln313_6_reg_1526_pp0_iter4_reg;
                trunc_ln313_6_reg_1526_pp0_iter6_reg <= trunc_ln313_6_reg_1526_pp0_iter5_reg;
                trunc_ln313_6_reg_1526_pp0_iter7_reg <= trunc_ln313_6_reg_1526_pp0_iter6_reg;
                trunc_ln313_6_reg_1526_pp0_iter8_reg <= trunc_ln313_6_reg_1526_pp0_iter7_reg;
                trunc_ln313_6_reg_1526_pp0_iter9_reg <= trunc_ln313_6_reg_1526_pp0_iter8_reg;
                trunc_ln313_7_reg_1536 <= trunc_ln313_7_fu_552_p1;
                trunc_ln313_7_reg_1536_pp0_iter10_reg <= trunc_ln313_7_reg_1536_pp0_iter9_reg;
                trunc_ln313_7_reg_1536_pp0_iter11_reg <= trunc_ln313_7_reg_1536_pp0_iter10_reg;
                trunc_ln313_7_reg_1536_pp0_iter2_reg <= trunc_ln313_7_reg_1536;
                trunc_ln313_7_reg_1536_pp0_iter3_reg <= trunc_ln313_7_reg_1536_pp0_iter2_reg;
                trunc_ln313_7_reg_1536_pp0_iter4_reg <= trunc_ln313_7_reg_1536_pp0_iter3_reg;
                trunc_ln313_7_reg_1536_pp0_iter5_reg <= trunc_ln313_7_reg_1536_pp0_iter4_reg;
                trunc_ln313_7_reg_1536_pp0_iter6_reg <= trunc_ln313_7_reg_1536_pp0_iter5_reg;
                trunc_ln313_7_reg_1536_pp0_iter7_reg <= trunc_ln313_7_reg_1536_pp0_iter6_reg;
                trunc_ln313_7_reg_1536_pp0_iter8_reg <= trunc_ln313_7_reg_1536_pp0_iter7_reg;
                trunc_ln313_7_reg_1536_pp0_iter9_reg <= trunc_ln313_7_reg_1536_pp0_iter8_reg;
                trunc_ln313_8_reg_1546 <= trunc_ln313_8_fu_556_p1;
                trunc_ln313_8_reg_1546_pp0_iter10_reg <= trunc_ln313_8_reg_1546_pp0_iter9_reg;
                trunc_ln313_8_reg_1546_pp0_iter11_reg <= trunc_ln313_8_reg_1546_pp0_iter10_reg;
                trunc_ln313_8_reg_1546_pp0_iter12_reg <= trunc_ln313_8_reg_1546_pp0_iter11_reg;
                trunc_ln313_8_reg_1546_pp0_iter2_reg <= trunc_ln313_8_reg_1546;
                trunc_ln313_8_reg_1546_pp0_iter3_reg <= trunc_ln313_8_reg_1546_pp0_iter2_reg;
                trunc_ln313_8_reg_1546_pp0_iter4_reg <= trunc_ln313_8_reg_1546_pp0_iter3_reg;
                trunc_ln313_8_reg_1546_pp0_iter5_reg <= trunc_ln313_8_reg_1546_pp0_iter4_reg;
                trunc_ln313_8_reg_1546_pp0_iter6_reg <= trunc_ln313_8_reg_1546_pp0_iter5_reg;
                trunc_ln313_8_reg_1546_pp0_iter7_reg <= trunc_ln313_8_reg_1546_pp0_iter6_reg;
                trunc_ln313_8_reg_1546_pp0_iter8_reg <= trunc_ln313_8_reg_1546_pp0_iter7_reg;
                trunc_ln313_8_reg_1546_pp0_iter9_reg <= trunc_ln313_8_reg_1546_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mean_reg_1636 <= grp_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)))) then
                reg_484 <= grp_generic_round_float_s_fu_288_ap_return;
                reg_491 <= grp_generic_round_float_s_fu_297_ap_return;
                reg_498 <= grp_generic_round_float_s_fu_306_ap_return;
                reg_505 <= grp_generic_round_float_s_fu_315_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sum_1_reg_1561 <= grp_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum_2_reg_1571 <= grp_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sum_3_reg_1581 <= grp_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum_4_reg_1591 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sum_5_reg_1601 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum_6_reg_1611 <= grp_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sum_7_reg_1621 <= grp_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum_reg_1551 <= grp_fu_333_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to32)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to32 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    and_ln22_10_fu_1122_p2 <= (or_ln22_14_fu_1116_p2 and grp_fu_413_p2);
    and_ln22_11_fu_1128_p2 <= (or_ln22_14_fu_1116_p2 and grp_fu_419_p2);
    and_ln22_12_fu_1192_p2 <= (or_ln22_15_fu_1186_p2 and grp_fu_425_p2);
    and_ln22_13_fu_1198_p2 <= (or_ln22_15_fu_1186_p2 and grp_fu_431_p2);
    and_ln22_14_fu_1262_p2 <= (or_ln22_16_fu_1256_p2 and grp_fu_437_p2);
    and_ln22_15_fu_1268_p2 <= (or_ln22_16_fu_1256_p2 and grp_fu_443_p2);
    and_ln22_16_fu_1332_p2 <= (or_ln22_17_fu_1326_p2 and grp_fu_449_p2);
    and_ln22_17_fu_1338_p2 <= (or_ln22_17_fu_1326_p2 and grp_fu_455_p2);
    and_ln22_1_fu_780_p2 <= (or_ln22_9_fu_768_p2 and grp_fu_413_p2);
    and_ln22_2_fu_844_p2 <= (or_ln22_10_fu_838_p2 and grp_fu_419_p2);
    and_ln22_3_fu_850_p2 <= (or_ln22_10_fu_838_p2 and grp_fu_425_p2);
    and_ln22_4_fu_914_p2 <= (or_ln22_11_fu_908_p2 and grp_fu_431_p2);
    and_ln22_5_fu_920_p2 <= (or_ln22_11_fu_908_p2 and grp_fu_437_p2);
    and_ln22_6_fu_984_p2 <= (or_ln22_12_fu_978_p2 and grp_fu_443_p2);
    and_ln22_7_fu_990_p2 <= (or_ln22_12_fu_978_p2 and grp_fu_449_p2);
    and_ln22_8_fu_1053_p2 <= (or_ln22_13_fu_1047_p2 and grp_fu_455_p2);
    and_ln22_9_fu_1059_p2 <= (or_ln22_13_fu_1047_p2 and grp_fu_461_p2);
    and_ln22_fu_774_p2 <= (or_ln22_9_fu_768_p2 and grp_fu_406_p2);
    and_ln23_fu_689_p2 <= (or_ln23_fu_685_p2 and grp_fu_406_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter32, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to31_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_0to31 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to32_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_1to32 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to31)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to31 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln22_1_fu_808_p1 <= reg_491;
    bitcast_ln22_2_fu_878_p1 <= reg_498;
    bitcast_ln22_3_fu_948_p1 <= reg_505;
    bitcast_ln22_4_fu_1018_p1 <= scaled_8_reg_1727;
    bitcast_ln22_5_fu_1086_p1 <= reg_484;
    bitcast_ln22_6_fu_1156_p1 <= reg_491;
    bitcast_ln22_7_fu_1226_p1 <= reg_498;
    bitcast_ln22_8_fu_1296_p1 <= reg_505;
    bitcast_ln22_fu_738_p1 <= reg_484;
    bitcast_ln23_1_fu_1371_p1 <= grp_fu_396_p2;
    bitcast_ln23_2_fu_1386_p1 <= grp_fu_388_p2;
    bitcast_ln23_3_fu_1376_p1 <= grp_fu_388_p2;
    bitcast_ln23_5_fu_1396_p1 <= grp_fu_392_p2;
    bitcast_ln23_6_fu_1381_p1 <= grp_fu_392_p2;
    bitcast_ln23_8_fu_1406_p1 <= grp_fu_396_p2;
    bitcast_ln23_9_fu_656_p1 <= mean_reg_1636;
    bitcast_ln327_1_fu_567_p1 <= t_1_fu_560_p3;
    bitcast_ln327_2_fu_579_p1 <= t_2_fu_572_p3;
    bitcast_ln327_3_fu_591_p1 <= t_3_fu_584_p3;
    bitcast_ln327_4_fu_603_p1 <= t_4_fu_596_p3;
    bitcast_ln327_5_fu_615_p1 <= t_5_fu_608_p3;
    bitcast_ln327_6_fu_627_p1 <= t_6_fu_620_p3;
    bitcast_ln327_7_fu_639_p1 <= t_7_fu_632_p3;
    bitcast_ln327_fu_543_p1 <= t_fu_536_p3;
    dc_1_fu_706_p1 <= data_1_reg_1451_pp0_iter25_reg;
    dc_2_fu_710_p1 <= data_2_reg_1461_pp0_iter25_reg;
    dc_3_fu_714_p1 <= data_3_reg_1471_pp0_iter25_reg;
    dc_5_fu_722_p1 <= data_5_reg_1491_pp0_iter26_reg;
    dc_6_fu_726_p1 <= data_6_reg_1521_pp0_iter26_reg;
    dc_7_fu_730_p1 <= data_7_reg_1531_pp0_iter26_reg;
    dc_8_fu_734_p1 <= data_8_reg_1541_pp0_iter26_reg;
    dc_fu_702_p1 <= data_reg_1441_pp0_iter25_reg;

    grp_fu_333_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, bitcast_ln327_fu_543_p1, sum_reg_1551, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_333_p0 <= sum_reg_1551;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_333_p0 <= bitcast_ln327_fu_543_p1;
        else 
            grp_fu_333_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_333_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, bitcast_ln327_1_fu_567_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_333_p1 <= bitcast_ln327_1_fu_567_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_333_p1 <= ap_const_lv32_0;
        else 
            grp_fu_333_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_338_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, sum_1_reg_1561, sum_2_reg_1571, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_338_p0 <= sum_2_reg_1571;
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_338_p0 <= sum_1_reg_1561;
        else 
            grp_fu_338_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_338_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, bitcast_ln327_2_fu_579_p1, bitcast_ln327_3_fu_591_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_338_p1 <= bitcast_ln327_3_fu_591_p1;
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_338_p1 <= bitcast_ln327_2_fu_579_p1;
        else 
            grp_fu_338_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_342_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, sum_3_reg_1581, sum_4_reg_1591, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_342_p0 <= sum_4_reg_1591;
        elsif (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_342_p0 <= sum_3_reg_1581;
        else 
            grp_fu_342_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_342_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, bitcast_ln327_4_fu_603_p1, bitcast_ln327_5_fu_615_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_342_p1 <= bitcast_ln327_5_fu_615_p1;
        elsif (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_342_p1 <= bitcast_ln327_4_fu_603_p1;
        else 
            grp_fu_342_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_346_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage1, sum_5_reg_1601, sum_6_reg_1611, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_346_p0 <= sum_6_reg_1611;
        elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_346_p0 <= sum_5_reg_1601;
        else 
            grp_fu_346_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_346_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage1, bitcast_ln327_6_fu_627_p1, bitcast_ln327_7_fu_639_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_346_p1 <= bitcast_ln327_7_fu_639_p1;
        elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_346_p1 <= bitcast_ln327_6_fu_627_p1;
        else 
            grp_fu_346_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_350_p1 <= t_8_fu_644_p3;

    grp_fu_354_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_CS_fsm_pp0_stage1, dc_fu_702_p1, dc_5_fu_722_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_354_p0 <= dc_5_fu_722_p1;
        elsif (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_354_p0 <= dc_fu_702_p1;
        else 
            grp_fu_354_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_359_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_CS_fsm_pp0_stage1, dc_1_fu_706_p1, dc_6_fu_726_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_359_p0 <= dc_6_fu_726_p1;
        elsif (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_359_p0 <= dc_1_fu_706_p1;
        else 
            grp_fu_359_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_364_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_CS_fsm_pp0_stage1, dc_2_fu_710_p1, dc_7_fu_730_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_364_p0 <= dc_7_fu_730_p1;
        elsif (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_364_p0 <= dc_2_fu_710_p1;
        else 
            grp_fu_364_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_369_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_CS_fsm_pp0_stage1, dc_3_fu_714_p1, dc_8_fu_734_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_369_p0 <= dc_8_fu_734_p1;
        elsif (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_369_p0 <= dc_3_fu_714_p1;
        else 
            grp_fu_369_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_374_p0 <= data_4_reg_1481_pp0_iter25_reg;

    grp_fu_379_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter29, ap_CS_fsm_pp0_stage1, sum_8_reg_1631, scaled_9_reg_1755, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            grp_fu_379_p0 <= scaled_9_reg_1755;
        elsif (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_379_p0 <= sum_8_reg_1631;
        else 
            grp_fu_379_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_379_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter29, ap_CS_fsm_pp0_stage1, scale_reg_1668_pp0_iter28_reg, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            grp_fu_379_p1 <= scale_reg_1668_pp0_iter28_reg;
        elsif (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_379_p1 <= ap_const_lv32_41100000;
        else 
            grp_fu_379_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_384_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_CS_fsm_pp0_stage1, scaled_1_reg_1735, scaled_11_reg_1760, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            grp_fu_384_p0 <= scaled_11_reg_1760;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_384_p0 <= scaled_1_reg_1735;
        else 
            grp_fu_384_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_388_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_CS_fsm_pp0_stage1, scaled_3_reg_1740, scaled_13_reg_1765, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            grp_fu_388_p0 <= scaled_13_reg_1765;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_388_p0 <= scaled_3_reg_1740;
        else 
            grp_fu_388_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_CS_fsm_pp0_stage1, scaled_5_reg_1745, scaled_15_reg_1770, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            grp_fu_392_p0 <= scaled_15_reg_1770;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_392_p0 <= scaled_5_reg_1745;
        else 
            grp_fu_392_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_396_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_CS_fsm_pp0_stage1, scaled_7_reg_1750, scaled_17_reg_1775, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            grp_fu_396_p0 <= scaled_17_reg_1775;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_396_p0 <= scaled_7_reg_1750;
        else 
            grp_fu_396_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_406_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter27, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_00001, ap_block_pp0_stage1_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_406_opcode <= ap_const_lv5_2;
        elsif (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001))) then 
            grp_fu_406_opcode <= ap_const_lv5_4;
        else 
            grp_fu_406_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_406_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter27, ap_CS_fsm_pp0_stage1, grp_generic_round_float_s_fu_288_ap_return, mean_reg_1636, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_406_p0 <= grp_generic_round_float_s_fu_288_ap_return;
        elsif (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_406_p0 <= mean_reg_1636;
        else 
            grp_fu_406_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_406_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter27, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_406_p1 <= ap_const_lv32_3F800000;
        elsif (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_406_p1 <= ap_const_lv32_3727C5AC;
        else 
            grp_fu_406_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_413_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_00001, ap_block_pp0_stage1_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_413_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_413_opcode <= ap_const_lv5_4;
        else 
            grp_fu_413_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_413_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_413_p1 <= ap_const_lv32_3F800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_413_p1 <= ap_const_lv32_BF800000;
        else 
            grp_fu_413_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_419_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_00001, ap_block_pp0_stage1_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_419_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_419_opcode <= ap_const_lv5_2;
        else 
            grp_fu_419_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_419_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, grp_generic_round_float_s_fu_288_ap_return, grp_generic_round_float_s_fu_297_ap_return, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_419_p0 <= grp_generic_round_float_s_fu_288_ap_return;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_419_p0 <= grp_generic_round_float_s_fu_297_ap_return;
        else 
            grp_fu_419_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_419_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_419_p1 <= ap_const_lv32_BF800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_419_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_419_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_425_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_00001, ap_block_pp0_stage1_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_425_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_425_opcode <= ap_const_lv5_4;
        else 
            grp_fu_425_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_425_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_425_p1 <= ap_const_lv32_3F800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_425_p1 <= ap_const_lv32_BF800000;
        else 
            grp_fu_425_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_431_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_00001, ap_block_pp0_stage1_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_431_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_431_opcode <= ap_const_lv5_2;
        else 
            grp_fu_431_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_431_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, grp_generic_round_float_s_fu_297_ap_return, grp_generic_round_float_s_fu_306_ap_return, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_431_p0 <= grp_generic_round_float_s_fu_297_ap_return;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_431_p0 <= grp_generic_round_float_s_fu_306_ap_return;
        else 
            grp_fu_431_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_431_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_431_p1 <= ap_const_lv32_BF800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_431_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_431_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_437_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_00001, ap_block_pp0_stage1_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_437_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_437_opcode <= ap_const_lv5_4;
        else 
            grp_fu_437_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_437_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_437_p1 <= ap_const_lv32_3F800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_437_p1 <= ap_const_lv32_BF800000;
        else 
            grp_fu_437_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_443_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_00001, ap_block_pp0_stage1_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_443_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_443_opcode <= ap_const_lv5_2;
        else 
            grp_fu_443_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_443_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, grp_generic_round_float_s_fu_306_ap_return, grp_generic_round_float_s_fu_315_ap_return, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_443_p0 <= grp_generic_round_float_s_fu_306_ap_return;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_443_p0 <= grp_generic_round_float_s_fu_315_ap_return;
        else 
            grp_fu_443_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_443_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_443_p1 <= ap_const_lv32_BF800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_443_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_443_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_449_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_00001, ap_block_pp0_stage1_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_449_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_449_opcode <= ap_const_lv5_4;
        else 
            grp_fu_449_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_449_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_449_p1 <= ap_const_lv32_3F800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_449_p1 <= ap_const_lv32_BF800000;
        else 
            grp_fu_449_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_455_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_00001, ap_block_pp0_stage1_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_455_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_455_opcode <= ap_const_lv5_2;
        else 
            grp_fu_455_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_455_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, grp_generic_round_float_s_fu_315_ap_return, grp_generic_round_float_s_fu_324_ap_return, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_455_p0 <= grp_generic_round_float_s_fu_315_ap_return;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_455_p0 <= grp_generic_round_float_s_fu_324_ap_return;
        else 
            grp_fu_455_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_455_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_455_p1 <= ap_const_lv32_BF800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_455_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_455_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_generic_round_float_s_fu_288_ap_start <= grp_generic_round_float_s_fu_288_ap_start_reg;
    grp_generic_round_float_s_fu_297_ap_start <= grp_generic_round_float_s_fu_297_ap_start_reg;
    grp_generic_round_float_s_fu_306_ap_start <= grp_generic_round_float_s_fu_306_ap_start_reg;
    grp_generic_round_float_s_fu_315_ap_start <= grp_generic_round_float_s_fu_315_ap_start_reg;
    grp_generic_round_float_s_fu_324_ap_start <= grp_generic_round_float_s_fu_324_ap_start_reg;
    icmp_ln22_10_fu_1104_p2 <= "0" when (tmp_17_fu_1090_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_11_fu_1110_p2 <= "1" when (trunc_ln22_5_fu_1100_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_12_fu_1174_p2 <= "0" when (tmp_20_fu_1160_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_13_fu_1180_p2 <= "1" when (trunc_ln22_6_fu_1170_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_14_fu_1244_p2 <= "0" when (tmp_23_fu_1230_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_15_fu_1250_p2 <= "1" when (trunc_ln22_7_fu_1240_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_16_fu_1314_p2 <= "0" when (tmp_26_fu_1300_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_17_fu_1320_p2 <= "1" when (trunc_ln22_8_fu_1310_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_1_fu_762_p2 <= "1" when (trunc_ln22_fu_752_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_2_fu_826_p2 <= "0" when (tmp_6_fu_812_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_3_fu_832_p2 <= "1" when (trunc_ln22_1_fu_822_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_4_fu_896_p2 <= "0" when (tmp_4_fu_882_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_5_fu_902_p2 <= "1" when (trunc_ln22_2_fu_892_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_6_fu_966_p2 <= "0" when (tmp_11_fu_952_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_7_fu_972_p2 <= "1" when (trunc_ln22_3_fu_962_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_8_fu_1035_p2 <= "0" when (tmp_14_fu_1021_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_9_fu_1041_p2 <= "1" when (trunc_ln22_4_fu_1031_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_fu_756_p2 <= "0" when (tmp_2_fu_742_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_1_fu_679_p2 <= "1" when (trunc_ln23_fu_669_p1 = ap_const_lv23_0) else "0";
    icmp_ln23_fu_673_p2 <= "0" when (tmp_fu_659_p4 = ap_const_lv8_FF) else "1";

    input_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                input_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                input_0_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                input_0_address0 <= "XX";
            end if;
        else 
            input_0_address0 <= "XX";
        end if; 
    end process;

    input_0_address1 <= ap_const_lv64_0(2 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_0_ce1 <= ap_const_logic_1;
        else 
            input_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                input_1_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                input_1_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                input_1_address0 <= "XX";
            end if;
        else 
            input_1_address0 <= "XX";
        end if; 
    end process;

    input_1_address1 <= ap_const_lv64_0(2 - 1 downto 0);

    input_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_1_ce1 <= ap_const_logic_1;
        else 
            input_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                input_2_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                input_2_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                input_2_address0 <= "XX";
            end if;
        else 
            input_2_address0 <= "XX";
        end if; 
    end process;

    input_2_address1 <= ap_const_lv64_0(2 - 1 downto 0);

    input_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_2_ce0 <= ap_const_logic_1;
        else 
            input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_ce1 <= ap_const_logic_1;
        else 
            input_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln22_10_fu_838_p2 <= (icmp_ln22_3_fu_832_p2 or icmp_ln22_2_fu_826_p2);
    or_ln22_11_fu_908_p2 <= (icmp_ln22_5_fu_902_p2 or icmp_ln22_4_fu_896_p2);
    or_ln22_12_fu_978_p2 <= (icmp_ln22_7_fu_972_p2 or icmp_ln22_6_fu_966_p2);
    or_ln22_13_fu_1047_p2 <= (icmp_ln22_9_fu_1041_p2 or icmp_ln22_8_fu_1035_p2);
    or_ln22_14_fu_1116_p2 <= (icmp_ln22_11_fu_1110_p2 or icmp_ln22_10_fu_1104_p2);
    or_ln22_15_fu_1186_p2 <= (icmp_ln22_13_fu_1180_p2 or icmp_ln22_12_fu_1174_p2);
    or_ln22_16_fu_1256_p2 <= (icmp_ln22_15_fu_1250_p2 or icmp_ln22_14_fu_1244_p2);
    or_ln22_17_fu_1326_p2 <= (icmp_ln22_17_fu_1320_p2 or icmp_ln22_16_fu_1314_p2);
    or_ln22_1_fu_864_p2 <= (and_ln22_3_fu_850_p2 or and_ln22_2_fu_844_p2);
    or_ln22_2_fu_934_p2 <= (and_ln22_5_fu_920_p2 or and_ln22_4_fu_914_p2);
    or_ln22_3_fu_1004_p2 <= (and_ln22_7_fu_990_p2 or and_ln22_6_fu_984_p2);
    or_ln22_4_fu_1073_p2 <= (and_ln22_9_fu_1059_p2 or and_ln22_8_fu_1053_p2);
    or_ln22_5_fu_1142_p2 <= (and_ln22_11_fu_1128_p2 or and_ln22_10_fu_1122_p2);
    or_ln22_6_fu_1212_p2 <= (and_ln22_13_fu_1198_p2 or and_ln22_12_fu_1192_p2);
    or_ln22_7_fu_1282_p2 <= (and_ln22_15_fu_1268_p2 or and_ln22_14_fu_1262_p2);
    or_ln22_8_fu_1352_p2 <= (and_ln22_17_fu_1338_p2 or and_ln22_16_fu_1332_p2);
    or_ln22_9_fu_768_p2 <= (icmp_ln22_fu_756_p2 or icmp_ln22_1_fu_762_p2);
    or_ln22_fu_794_p2 <= (and_ln22_fu_774_p2 or and_ln22_1_fu_780_p2);
    or_ln23_fu_685_p2 <= (icmp_ln23_reg_1643 or icmp_ln23_1_reg_1648);

    output_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            output_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            output_0_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            output_0_address0 <= "XX";
        end if; 
    end process;

    output_0_address1 <= ap_const_lv64_0(2 - 1 downto 0);

    output_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1)))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter31, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            output_0_ce1 <= ap_const_logic_1;
        else 
            output_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, bitcast_ln23_1_fu_1371_p1, bitcast_ln23_2_fu_1386_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            output_0_d0 <= bitcast_ln23_2_fu_1386_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            output_0_d0 <= bitcast_ln23_1_fu_1371_p1;
        else 
            output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    output_0_d1 <= grp_fu_384_p2;

    output_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1)))) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_we1_assign_proc : process(ap_enable_reg_pp0_iter31, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            output_0_we1 <= ap_const_logic_1;
        else 
            output_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            output_1_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            output_1_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            output_1_address0 <= "XX";
        end if; 
    end process;

    output_1_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    output_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1)))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter32, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            output_1_ce1 <= ap_const_logic_1;
        else 
            output_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, bitcast_ln23_3_fu_1376_p1, bitcast_ln23_5_fu_1396_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            output_1_d0 <= bitcast_ln23_5_fu_1396_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            output_1_d0 <= bitcast_ln23_3_fu_1376_p1;
        else 
            output_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    output_1_d1 <= grp_fu_379_p2;

    output_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1)))) then 
            output_1_we0 <= ap_const_logic_1;
        else 
            output_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter32, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            output_1_we1 <= ap_const_logic_1;
        else 
            output_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            output_2_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            output_2_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            output_2_address0 <= "XX";
        end if; 
    end process;

    output_2_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    output_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1)))) then 
            output_2_ce0 <= ap_const_logic_1;
        else 
            output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter32, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            output_2_ce1 <= ap_const_logic_1;
        else 
            output_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, bitcast_ln23_6_fu_1381_p1, bitcast_ln23_8_fu_1406_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            output_2_d0 <= bitcast_ln23_8_fu_1406_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            output_2_d0 <= bitcast_ln23_6_fu_1381_p1;
        else 
            output_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    output_2_d1 <= grp_fu_384_p2;

    output_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1)))) then 
            output_2_we0 <= ap_const_logic_1;
        else 
            output_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter32, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            output_2_we1 <= ap_const_logic_1;
        else 
            output_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    scaled_11_fu_1148_p3 <= 
        select_ln22_10_fu_1134_p3 when (or_ln22_5_fu_1142_p2(0) = '1') else 
        reg_484;
    scaled_13_fu_1218_p3 <= 
        select_ln22_12_fu_1204_p3 when (or_ln22_6_fu_1212_p2(0) = '1') else 
        reg_491;
    scaled_15_fu_1288_p3 <= 
        select_ln22_14_fu_1274_p3 when (or_ln22_7_fu_1282_p2(0) = '1') else 
        reg_498;
    scaled_17_fu_1358_p3 <= 
        select_ln22_16_fu_1344_p3 when (or_ln22_8_fu_1352_p2(0) = '1') else 
        reg_505;
    scaled_1_fu_800_p3 <= 
        select_ln22_fu_786_p3 when (or_ln22_fu_794_p2(0) = '1') else 
        reg_484;
    scaled_3_fu_870_p3 <= 
        select_ln22_2_fu_856_p3 when (or_ln22_1_fu_864_p2(0) = '1') else 
        reg_491;
    scaled_5_fu_940_p3 <= 
        select_ln22_4_fu_926_p3 when (or_ln22_2_fu_934_p2(0) = '1') else 
        reg_498;
    scaled_7_fu_1010_p3 <= 
        select_ln22_6_fu_996_p3 when (or_ln22_3_fu_1004_p2(0) = '1') else 
        reg_505;
    scaled_9_fu_1079_p3 <= 
        select_ln22_8_fu_1065_p3 when (or_ln22_4_fu_1073_p2(0) = '1') else 
        scaled_8_reg_1727;
    select_ln13_fu_695_p3 <= 
        ap_const_lv64_3EE4F8B580000000 when (and_ln23_fu_689_p2(0) = '1') else 
        tmp_9_reg_1653;
    select_ln22_10_fu_1134_p3 <= 
        ap_const_lv32_3F800000 when (and_ln22_10_fu_1122_p2(0) = '1') else 
        ap_const_lv32_BF800000;
    select_ln22_12_fu_1204_p3 <= 
        ap_const_lv32_3F800000 when (and_ln22_12_fu_1192_p2(0) = '1') else 
        ap_const_lv32_BF800000;
    select_ln22_14_fu_1274_p3 <= 
        ap_const_lv32_3F800000 when (and_ln22_14_fu_1262_p2(0) = '1') else 
        ap_const_lv32_BF800000;
    select_ln22_16_fu_1344_p3 <= 
        ap_const_lv32_3F800000 when (and_ln22_16_fu_1332_p2(0) = '1') else 
        ap_const_lv32_BF800000;
    select_ln22_2_fu_856_p3 <= 
        ap_const_lv32_3F800000 when (and_ln22_2_fu_844_p2(0) = '1') else 
        ap_const_lv32_BF800000;
    select_ln22_4_fu_926_p3 <= 
        ap_const_lv32_3F800000 when (and_ln22_4_fu_914_p2(0) = '1') else 
        ap_const_lv32_BF800000;
    select_ln22_6_fu_996_p3 <= 
        ap_const_lv32_3F800000 when (and_ln22_6_fu_984_p2(0) = '1') else 
        ap_const_lv32_BF800000;
    select_ln22_8_fu_1065_p3 <= 
        ap_const_lv32_3F800000 when (and_ln22_8_fu_1053_p2(0) = '1') else 
        ap_const_lv32_BF800000;
    select_ln22_fu_786_p3 <= 
        ap_const_lv32_3F800000 when (and_ln22_fu_774_p2(0) = '1') else 
        ap_const_lv32_BF800000;
    t_1_fu_560_p3 <= (ap_const_lv1_0 & trunc_ln313_1_reg_1456_pp0_iter1_reg);
    t_2_fu_572_p3 <= (ap_const_lv1_0 & trunc_ln313_2_reg_1466_pp0_iter3_reg);
    t_3_fu_584_p3 <= (ap_const_lv1_0 & trunc_ln313_3_reg_1476_pp0_iter4_reg);
    t_4_fu_596_p3 <= (ap_const_lv1_0 & trunc_ln313_4_reg_1486_pp0_iter6_reg);
    t_5_fu_608_p3 <= (ap_const_lv1_0 & trunc_ln313_5_reg_1496_pp0_iter7_reg);
    t_6_fu_620_p3 <= (ap_const_lv1_0 & trunc_ln313_6_reg_1526_pp0_iter9_reg);
    t_7_fu_632_p3 <= (ap_const_lv1_0 & trunc_ln313_7_reg_1536_pp0_iter11_reg);
    t_8_fu_644_p3 <= (ap_const_lv1_0 & trunc_ln313_8_reg_1546_pp0_iter12_reg);
    t_fu_536_p3 <= (ap_const_lv1_0 & trunc_ln313_reg_1446);
    tmp_11_fu_952_p4 <= bitcast_ln22_3_fu_948_p1(30 downto 23);
    tmp_14_fu_1021_p4 <= bitcast_ln22_4_fu_1018_p1(30 downto 23);
    tmp_17_fu_1090_p4 <= bitcast_ln22_5_fu_1086_p1(30 downto 23);
    tmp_20_fu_1160_p4 <= bitcast_ln22_6_fu_1156_p1(30 downto 23);
    tmp_23_fu_1230_p4 <= bitcast_ln22_7_fu_1226_p1(30 downto 23);
    tmp_26_fu_1300_p4 <= bitcast_ln22_8_fu_1296_p1(30 downto 23);
    tmp_2_fu_742_p4 <= bitcast_ln22_fu_738_p1(30 downto 23);
    tmp_4_fu_882_p4 <= bitcast_ln22_2_fu_878_p1(30 downto 23);
    tmp_6_fu_812_p4 <= bitcast_ln22_1_fu_808_p1(30 downto 23);
    tmp_fu_659_p4 <= bitcast_ln23_9_fu_656_p1(30 downto 23);
    trunc_ln22_1_fu_822_p1 <= bitcast_ln22_1_fu_808_p1(23 - 1 downto 0);
    trunc_ln22_2_fu_892_p1 <= bitcast_ln22_2_fu_878_p1(23 - 1 downto 0);
    trunc_ln22_3_fu_962_p1 <= bitcast_ln22_3_fu_948_p1(23 - 1 downto 0);
    trunc_ln22_4_fu_1031_p1 <= bitcast_ln22_4_fu_1018_p1(23 - 1 downto 0);
    trunc_ln22_5_fu_1100_p1 <= bitcast_ln22_5_fu_1086_p1(23 - 1 downto 0);
    trunc_ln22_6_fu_1170_p1 <= bitcast_ln22_6_fu_1156_p1(23 - 1 downto 0);
    trunc_ln22_7_fu_1240_p1 <= bitcast_ln22_7_fu_1226_p1(23 - 1 downto 0);
    trunc_ln22_8_fu_1310_p1 <= bitcast_ln22_8_fu_1296_p1(23 - 1 downto 0);
    trunc_ln22_fu_752_p1 <= bitcast_ln22_fu_738_p1(23 - 1 downto 0);
    trunc_ln23_fu_669_p1 <= bitcast_ln23_9_fu_656_p1(23 - 1 downto 0);
    trunc_ln313_1_fu_516_p1 <= input_1_q1(31 - 1 downto 0);
    trunc_ln313_2_fu_520_p1 <= input_2_q1(31 - 1 downto 0);
    trunc_ln313_3_fu_524_p1 <= input_0_q0(31 - 1 downto 0);
    trunc_ln313_4_fu_528_p1 <= input_1_q0(31 - 1 downto 0);
    trunc_ln313_5_fu_532_p1 <= input_2_q0(31 - 1 downto 0);
    trunc_ln313_6_fu_548_p1 <= input_0_q0(31 - 1 downto 0);
    trunc_ln313_7_fu_552_p1 <= input_1_q0(31 - 1 downto 0);
    trunc_ln313_8_fu_556_p1 <= input_2_q0(31 - 1 downto 0);
    trunc_ln313_fu_512_p1 <= input_0_q1(31 - 1 downto 0);
end behav;
