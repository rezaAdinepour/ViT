// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module bit_linear_find_max_abs (
        ap_clk,
        ap_rst,
        arr_0_val,
        arr_1_val,
        arr_2_val,
        arr_3_val,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] arr_0_val;
input  [31:0] arr_1_val;
input  [31:0] arr_2_val;
input  [31:0] arr_3_val;
output  [31:0] ap_return;
input   ap_ce;

reg[31:0] ap_return;

reg   [31:0] arr_3_val_read_reg_451;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] arr_3_val_read_reg_451_pp0_iter1_reg;
reg   [31:0] arr_3_val_read_reg_451_pp0_iter2_reg;
reg   [31:0] arr_2_val_read_reg_456;
reg   [31:0] arr_2_val_read_reg_456_pp0_iter1_reg;
reg   [31:0] arr_1_val_read_reg_461;
wire   [31:0] abs_val_fu_95_p1;
reg   [31:0] abs_val_reg_466;
wire   [0:0] icmp_ln22_fu_110_p2;
reg   [0:0] icmp_ln22_reg_472;
wire   [0:0] icmp_ln22_1_fu_116_p2;
reg   [0:0] icmp_ln22_1_reg_477;
wire   [31:0] max_val_1_fu_132_p3;
reg   [31:0] max_val_1_reg_482;
wire   [31:0] abs_val_1_fu_159_p1;
reg   [31:0] abs_val_1_reg_489;
wire   [0:0] icmp_ln22_2_fu_174_p2;
reg   [0:0] icmp_ln22_2_reg_495;
wire   [0:0] icmp_ln22_3_fu_180_p2;
reg   [0:0] icmp_ln22_3_reg_500;
wire   [31:0] max_val_3_fu_237_p3;
reg   [31:0] max_val_3_reg_505;
wire   [31:0] abs_val_2_fu_263_p1;
reg   [31:0] abs_val_2_reg_512;
wire   [0:0] icmp_ln22_6_fu_278_p2;
reg   [0:0] icmp_ln22_6_reg_518;
wire   [0:0] icmp_ln22_7_fu_284_p2;
reg   [0:0] icmp_ln22_7_reg_523;
wire   [31:0] max_val_5_fu_341_p3;
reg   [31:0] max_val_5_reg_528;
wire   [31:0] abs_val_3_fu_367_p1;
reg   [31:0] abs_val_3_reg_535;
wire   [0:0] icmp_ln22_10_fu_382_p2;
reg   [0:0] icmp_ln22_10_reg_541;
wire   [0:0] icmp_ln22_11_fu_388_p2;
reg   [0:0] icmp_ln22_11_reg_546;
wire   [31:0] grp_fu_58_p0;
wire    ap_block_pp0_stage0;
wire   [31:0] grp_fu_63_p0;
wire   [31:0] grp_fu_63_p1;
wire   [31:0] grp_fu_67_p0;
wire   [31:0] grp_fu_67_p1;
wire   [31:0] grp_fu_71_p0;
wire   [31:0] grp_fu_71_p1;
wire   [31:0] data_fu_75_p1;
wire   [30:0] trunc_ln313_fu_79_p1;
wire   [31:0] t_fu_87_p3;
wire   [7:0] tmp_1_fu_100_p4;
wire   [22:0] trunc_ln22_fu_83_p1;
wire   [0:0] or_ln22_fu_122_p2;
wire   [0:0] grp_fu_58_p2;
wire   [0:0] and_ln22_fu_126_p2;
wire   [31:0] data_2_fu_140_p1;
wire   [30:0] trunc_ln313_1_fu_143_p1;
wire   [31:0] t_3_fu_151_p3;
wire   [7:0] tmp_4_fu_164_p4;
wire   [22:0] trunc_ln22_1_fu_147_p1;
wire   [31:0] bitcast_ln22_fu_186_p1;
wire   [7:0] tmp_5_fu_189_p4;
wire   [22:0] trunc_ln22_2_fu_199_p1;
wire   [0:0] icmp_ln22_5_fu_213_p2;
wire   [0:0] icmp_ln22_4_fu_207_p2;
wire   [0:0] or_ln22_1_fu_203_p2;
wire   [0:0] or_ln22_2_fu_219_p2;
wire   [0:0] and_ln22_1_fu_225_p2;
wire   [0:0] grp_fu_63_p2;
wire   [0:0] and_ln22_2_fu_231_p2;
wire   [31:0] data_3_fu_244_p1;
wire   [30:0] trunc_ln313_2_fu_247_p1;
wire   [31:0] t_4_fu_255_p3;
wire   [7:0] tmp_8_fu_268_p4;
wire   [22:0] trunc_ln22_3_fu_251_p1;
wire   [31:0] bitcast_ln22_1_fu_290_p1;
wire   [7:0] tmp_9_fu_293_p4;
wire   [22:0] trunc_ln22_4_fu_303_p1;
wire   [0:0] icmp_ln22_9_fu_317_p2;
wire   [0:0] icmp_ln22_8_fu_311_p2;
wire   [0:0] or_ln22_3_fu_307_p2;
wire   [0:0] or_ln22_4_fu_323_p2;
wire   [0:0] and_ln22_3_fu_329_p2;
wire   [0:0] grp_fu_67_p2;
wire   [0:0] and_ln22_4_fu_335_p2;
wire   [31:0] data_4_fu_348_p1;
wire   [30:0] trunc_ln313_3_fu_351_p1;
wire   [31:0] t_5_fu_359_p3;
wire   [7:0] tmp_3_fu_372_p4;
wire   [22:0] trunc_ln22_5_fu_355_p1;
wire   [31:0] bitcast_ln22_2_fu_394_p1;
wire   [7:0] tmp_7_fu_397_p4;
wire   [22:0] trunc_ln22_6_fu_407_p1;
wire   [0:0] icmp_ln22_13_fu_421_p2;
wire   [0:0] icmp_ln22_12_fu_415_p2;
wire   [0:0] or_ln22_5_fu_411_p2;
wire   [0:0] or_ln22_6_fu_427_p2;
wire   [0:0] and_ln22_5_fu_433_p2;
wire   [0:0] grp_fu_71_p2;
wire   [0:0] and_ln22_6_fu_439_p2;
reg    grp_fu_58_ce;
wire    ap_block_pp0_stage0_00001;
reg    grp_fu_63_ce;
reg    grp_fu_67_ce;
reg    grp_fu_71_ce;
wire   [31:0] max_val_7_fu_445_p3;
reg    ap_ce_reg;
reg   [31:0] arr_0_val_int_reg;
reg   [31:0] arr_1_val_int_reg;
reg   [31:0] arr_2_val_int_reg;
reg   [31:0] arr_3_val_int_reg;
reg   [31:0] ap_return_int_reg;

bit_linear_fcmp_32ns_32ns_1_2_no_dsp_0 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_0_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_58_p0),
    .din1(32'd0),
    .ce(grp_fu_58_ce),
    .opcode(5'd2),
    .dout(grp_fu_58_p2)
);

bit_linear_fcmp_32ns_32ns_1_2_no_dsp_0 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_0_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_63_p0),
    .din1(grp_fu_63_p1),
    .ce(grp_fu_63_ce),
    .opcode(5'd2),
    .dout(grp_fu_63_p2)
);

bit_linear_fcmp_32ns_32ns_1_2_no_dsp_0 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_0_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_67_p0),
    .din1(grp_fu_67_p1),
    .ce(grp_fu_67_ce),
    .opcode(5'd2),
    .dout(grp_fu_67_p2)
);

bit_linear_fcmp_32ns_32ns_1_2_no_dsp_0 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_0_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_71_p0),
    .din1(grp_fu_71_p1),
    .ce(grp_fu_71_ce),
    .opcode(5'd2),
    .dout(grp_fu_71_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        abs_val_1_reg_489[30 : 0] <= abs_val_1_fu_159_p1[30 : 0];
        abs_val_2_reg_512[30 : 0] <= abs_val_2_fu_263_p1[30 : 0];
        abs_val_3_reg_535[30 : 0] <= abs_val_3_fu_367_p1[30 : 0];
        abs_val_reg_466[30 : 0] <= abs_val_fu_95_p1[30 : 0];
        arr_1_val_read_reg_461 <= arr_1_val_int_reg;
        arr_2_val_read_reg_456 <= arr_2_val_int_reg;
        arr_2_val_read_reg_456_pp0_iter1_reg <= arr_2_val_read_reg_456;
        arr_3_val_read_reg_451 <= arr_3_val_int_reg;
        arr_3_val_read_reg_451_pp0_iter1_reg <= arr_3_val_read_reg_451;
        arr_3_val_read_reg_451_pp0_iter2_reg <= arr_3_val_read_reg_451_pp0_iter1_reg;
        icmp_ln22_10_reg_541 <= icmp_ln22_10_fu_382_p2;
        icmp_ln22_11_reg_546 <= icmp_ln22_11_fu_388_p2;
        icmp_ln22_1_reg_477 <= icmp_ln22_1_fu_116_p2;
        icmp_ln22_2_reg_495 <= icmp_ln22_2_fu_174_p2;
        icmp_ln22_3_reg_500 <= icmp_ln22_3_fu_180_p2;
        icmp_ln22_6_reg_518 <= icmp_ln22_6_fu_278_p2;
        icmp_ln22_7_reg_523 <= icmp_ln22_7_fu_284_p2;
        icmp_ln22_reg_472 <= icmp_ln22_fu_110_p2;
        max_val_1_reg_482[30 : 0] <= max_val_1_fu_132_p3[30 : 0];
        max_val_3_reg_505[30 : 0] <= max_val_3_fu_237_p3[30 : 0];
        max_val_5_reg_528[30 : 0] <= max_val_5_fu_341_p3[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg[30 : 0] <= max_val_7_fu_445_p3[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        arr_0_val_int_reg <= arr_0_val;
        arr_1_val_int_reg <= arr_1_val;
        arr_2_val_int_reg <= arr_2_val;
        arr_3_val_int_reg <= arr_3_val;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = max_val_7_fu_445_p3;
    end else begin
        ap_return = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_58_ce = 1'b1;
    end else begin
        grp_fu_58_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_63_ce = 1'b1;
    end else begin
        grp_fu_63_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_67_ce = 1'b1;
    end else begin
        grp_fu_67_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_71_ce = 1'b1;
    end else begin
        grp_fu_71_ce = 1'b0;
    end
end

assign abs_val_1_fu_159_p1 = t_3_fu_151_p3;

assign abs_val_2_fu_263_p1 = t_4_fu_255_p3;

assign abs_val_3_fu_367_p1 = t_5_fu_359_p3;

assign abs_val_fu_95_p1 = t_fu_87_p3;

assign and_ln22_1_fu_225_p2 = (or_ln22_2_fu_219_p2 & or_ln22_1_fu_203_p2);

assign and_ln22_2_fu_231_p2 = (grp_fu_63_p2 & and_ln22_1_fu_225_p2);

assign and_ln22_3_fu_329_p2 = (or_ln22_4_fu_323_p2 & or_ln22_3_fu_307_p2);

assign and_ln22_4_fu_335_p2 = (grp_fu_67_p2 & and_ln22_3_fu_329_p2);

assign and_ln22_5_fu_433_p2 = (or_ln22_6_fu_427_p2 & or_ln22_5_fu_411_p2);

assign and_ln22_6_fu_439_p2 = (grp_fu_71_p2 & and_ln22_5_fu_433_p2);

assign and_ln22_fu_126_p2 = (or_ln22_fu_122_p2 & grp_fu_58_p2);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign bitcast_ln22_1_fu_290_p1 = max_val_3_reg_505;

assign bitcast_ln22_2_fu_394_p1 = max_val_5_reg_528;

assign bitcast_ln22_fu_186_p1 = max_val_1_reg_482;

assign data_2_fu_140_p1 = arr_1_val_read_reg_461;

assign data_3_fu_244_p1 = arr_2_val_read_reg_456_pp0_iter1_reg;

assign data_4_fu_348_p1 = arr_3_val_read_reg_451_pp0_iter2_reg;

assign data_fu_75_p1 = arr_0_val_int_reg;

assign grp_fu_58_p0 = t_fu_87_p3;

assign grp_fu_63_p0 = t_3_fu_151_p3;

assign grp_fu_63_p1 = ((and_ln22_fu_126_p2[0:0] == 1'b1) ? abs_val_reg_466 : 32'd0);

assign grp_fu_67_p0 = t_4_fu_255_p3;

assign grp_fu_67_p1 = ((and_ln22_2_fu_231_p2[0:0] == 1'b1) ? abs_val_1_reg_489 : max_val_1_reg_482);

assign grp_fu_71_p0 = t_5_fu_359_p3;

assign grp_fu_71_p1 = ((and_ln22_4_fu_335_p2[0:0] == 1'b1) ? abs_val_2_reg_512 : max_val_3_reg_505);

assign icmp_ln22_10_fu_382_p2 = ((tmp_3_fu_372_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_11_fu_388_p2 = ((trunc_ln22_5_fu_355_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_12_fu_415_p2 = ((tmp_7_fu_397_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_13_fu_421_p2 = ((trunc_ln22_6_fu_407_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_1_fu_116_p2 = ((trunc_ln22_fu_83_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_2_fu_174_p2 = ((tmp_4_fu_164_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_3_fu_180_p2 = ((trunc_ln22_1_fu_147_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_4_fu_207_p2 = ((tmp_5_fu_189_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_5_fu_213_p2 = ((trunc_ln22_2_fu_199_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_6_fu_278_p2 = ((tmp_8_fu_268_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_7_fu_284_p2 = ((trunc_ln22_3_fu_251_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_8_fu_311_p2 = ((tmp_9_fu_293_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_9_fu_317_p2 = ((trunc_ln22_4_fu_303_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_110_p2 = ((tmp_1_fu_100_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_val_1_fu_132_p3 = ((and_ln22_fu_126_p2[0:0] == 1'b1) ? abs_val_reg_466 : 32'd0);

assign max_val_3_fu_237_p3 = ((and_ln22_2_fu_231_p2[0:0] == 1'b1) ? abs_val_1_reg_489 : max_val_1_reg_482);

assign max_val_5_fu_341_p3 = ((and_ln22_4_fu_335_p2[0:0] == 1'b1) ? abs_val_2_reg_512 : max_val_3_reg_505);

assign max_val_7_fu_445_p3 = ((and_ln22_6_fu_439_p2[0:0] == 1'b1) ? abs_val_3_reg_535 : max_val_5_reg_528);

assign or_ln22_1_fu_203_p2 = (icmp_ln22_3_reg_500 | icmp_ln22_2_reg_495);

assign or_ln22_2_fu_219_p2 = (icmp_ln22_5_fu_213_p2 | icmp_ln22_4_fu_207_p2);

assign or_ln22_3_fu_307_p2 = (icmp_ln22_7_reg_523 | icmp_ln22_6_reg_518);

assign or_ln22_4_fu_323_p2 = (icmp_ln22_9_fu_317_p2 | icmp_ln22_8_fu_311_p2);

assign or_ln22_5_fu_411_p2 = (icmp_ln22_11_reg_546 | icmp_ln22_10_reg_541);

assign or_ln22_6_fu_427_p2 = (icmp_ln22_13_fu_421_p2 | icmp_ln22_12_fu_415_p2);

assign or_ln22_fu_122_p2 = (icmp_ln22_reg_472 | icmp_ln22_1_reg_477);

assign t_3_fu_151_p3 = {{1'd0}, {trunc_ln313_1_fu_143_p1}};

assign t_4_fu_255_p3 = {{1'd0}, {trunc_ln313_2_fu_247_p1}};

assign t_5_fu_359_p3 = {{1'd0}, {trunc_ln313_3_fu_351_p1}};

assign t_fu_87_p3 = {{1'd0}, {trunc_ln313_fu_79_p1}};

assign tmp_1_fu_100_p4 = {{data_fu_75_p1[30:23]}};

assign tmp_3_fu_372_p4 = {{data_4_fu_348_p1[30:23]}};

assign tmp_4_fu_164_p4 = {{data_2_fu_140_p1[30:23]}};

assign tmp_5_fu_189_p4 = {{bitcast_ln22_fu_186_p1[30:23]}};

assign tmp_7_fu_397_p4 = {{bitcast_ln22_2_fu_394_p1[30:23]}};

assign tmp_8_fu_268_p4 = {{data_3_fu_244_p1[30:23]}};

assign tmp_9_fu_293_p4 = {{bitcast_ln22_1_fu_290_p1[30:23]}};

assign trunc_ln22_1_fu_147_p1 = data_2_fu_140_p1[22:0];

assign trunc_ln22_2_fu_199_p1 = bitcast_ln22_fu_186_p1[22:0];

assign trunc_ln22_3_fu_251_p1 = data_3_fu_244_p1[22:0];

assign trunc_ln22_4_fu_303_p1 = bitcast_ln22_1_fu_290_p1[22:0];

assign trunc_ln22_5_fu_355_p1 = data_4_fu_348_p1[22:0];

assign trunc_ln22_6_fu_407_p1 = bitcast_ln22_2_fu_394_p1[22:0];

assign trunc_ln22_fu_83_p1 = data_fu_75_p1[22:0];

assign trunc_ln313_1_fu_143_p1 = data_2_fu_140_p1[30:0];

assign trunc_ln313_2_fu_247_p1 = data_3_fu_244_p1[30:0];

assign trunc_ln313_3_fu_351_p1 = data_4_fu_348_p1[30:0];

assign trunc_ln313_fu_79_p1 = data_fu_75_p1[30:0];

always @ (posedge ap_clk) begin
    abs_val_reg_466[31] <= 1'b0;
    max_val_1_reg_482[31] <= 1'b0;
    abs_val_1_reg_489[31] <= 1'b0;
    max_val_3_reg_505[31] <= 1'b0;
    abs_val_2_reg_512[31] <= 1'b0;
    max_val_5_reg_528[31] <= 1'b0;
    abs_val_3_reg_535[31] <= 1'b0;
    ap_return_int_reg[31] <= 1'b0;
end

endmodule //bit_linear_find_max_abs
